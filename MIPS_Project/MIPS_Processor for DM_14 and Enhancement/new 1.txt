@0 
3c 01 12 34 //lui  $1, 0x1234 
34 21 56 78 //ori  $1, 0x5678 		# $1 <- 0x12345678 
7C 21 00 01 //push $1         		# dM[3F8] <- 0x12345678
3c 02 00 00 //lui  $2, 0x0000 
34 42 00 02 //ori  $2, 0x0002 		# $2 <- 0x00000002 
20 03 00 03 //addi $3, $0, 03 		# $3 <- 0x00000003 
3c 04 ff ff //lui  $4 0xFFFF 
34 84 ff ff //ori  $4 0xFFFF  		# $4 <- 0xFFFFFFFF 
1F 04 00 01 //push $4         		# dM[3F4] <- 0xFFFFFFFF 
20 05 00 05 //addi $5, $0, 05 		# $5 <- 0x00000005 
20 06 00 10 //addi $6, $0, 16 		# $6 <- 0x00000010 
00 82 38 20 //add  $7, $4, $2 		# $7 <- 0x00000001
30 03 00 03 //blt  $0, $3, 3 
3c 1b ff ff //lui  $27, 0xFFFF 
37 7b ff ff //ori  $27, 0xFFFF 		# $27 <- 0xFFFFFFFF FAIL 
00 00 00 0d //break 
20 08 00 08 //addi $8, $0, 08  		# $8 <- 0x00000008 
31 c3 00 03 //bge  $6, $5, 3 
3c 1a ff ff //lui  $26, 0xFFFF 
37 5a ff ff //ori  $26, 0xFFFF 		# $26 <- 0xFFFFFFFF FAIL 
00 00 00 0d //break 
20 07 00 07 //addi $7, $0, 07  		# $7 <- 0x00000007 
1F 8a 00 07 //mov  $10, $4 			# $10 <- 0xFFFFFFFF 
00 06 00 33 //clr  $6          		# $6 <- 0x00000000 
20 c6 00 06 //add  $6, $6, 06  		# $6 <- 0x00000006 FAIL if 0x00000016 
00 0a 00 30 //push $10         		# dM[3F0] <- 0xFFFFFFFF 
00 0c 00 31 //pop  $12         		# $12 <- 0xFFFFFFFF 
20 0e 00 10 //addi $14, $0, 14 		# $14 <- 0x00000010 
00 0e 00 30 //push $14             	# dM[3F0] <- 0x00000010 
00 0d 00 31 //pop  $13             	# $13 <- 0x00000010 
3c 0f 10 01 //lui  $15, 0x1001 
35 ef 00 c0 //ori  $15, 0x00C0 	   	# $15 <- 0x100100C0 
00 00 00 32 //nop 
ad e4 00 00 //loop //sw $4, 0($15) 	# dM[0C0] <- 0xFFFFFFFF to 0xFFFFFFFF 
21 ef 00 04 //addi $15, $15, 04 # $15 <- 0x100100C4 to 0x100100C4 
00 04 20 42 //srl  $4, $4, 1 		# logical shift right 1 bit 
c1 ad ff fc //djnz $13, loop loop = -4 = fffc 
00 01 00 33 //clr  $1 				# $1 <- 0x00000000 
00 11 00 31 //pop  $17 				# $17 <- 0xFFFFFFFF 
00 10 00 31 //pop  $16 				# $16 <- 0x12345678 
00 00 00 32 //nop 
00 00 00 32 //nop 
00 00 00 0d //break
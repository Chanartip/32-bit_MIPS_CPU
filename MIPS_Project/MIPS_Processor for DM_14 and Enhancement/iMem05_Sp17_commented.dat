@0
3c 01 ff ff  // main:      lui  $01, 0xFFFF
34 21 ff ff  //            ori  $01, 0xFFFF        # LI   R01,  0xFFFFFFF
20 02 ff f0  //            addi $02, $00, -16      # LI   R02,  -16 
3c 0f 10 01  //            lui  $15, 0x1001
35 ef 00 c0  //            ori  $15, 0x00C0        # LI   R15,  0x100100C0

00 01 08 40  // top:       sll  $01, $01, 1        # logical shift left 1 bit
ad e1 00 00  //            sw   $01, 0($15)        # ST  [R15], R01
21 ef 00 04  //            addi $15, $15, 4        # increment the memory pointer 4 bytes
20 42 00 01  //            addi $02, $02, 1        # increment the loop counter
28 43 00 00  //            slti $03, $02, 0        # r3 <--1 if r2 < 0
14 60 ff fa  //            bne  $03, $00, top      # jmp if r3==1

08 10 00 0d  //            j    exit               # jump around a halt instruction
00 00 00 0d  //            break

3c 0e 5a 5a  // exit:      lui  $14, 0x5A5A
35 ce 3c 3c  //            ori  $14, 0x3C3C        # LI   R14,  0x5A5A3C3C
00 00 00 0d  //            break

